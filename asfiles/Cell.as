/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS' OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package asfiles {		import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	public class Cell extends TextField {				public static const DEFAULTFORMAT:TextFormat=new TextFormat('Arial',11,0x333333);				public static const PERCENT:String='percent';		public static const TWODP:String='twodp';		public static const CURRENCY:String='currency';		public static const REAL:String='real';		public static const CUSTOM:String='custom';				private const dheight:int=17;				protected var _currencySymbol:String='$';		protected var _precision:int=2;				public var value:Number=Number.NaN;		public var string:String='';		public var pre:String='',post:String='';		public var dps:int=-1;		private var myscreen:Sprite;		public var garbage:Boolean=false;		public var iscurrent:int=0;		public var islisted:Boolean=false;		public var gnumformat:String=REAL;		private var datatype:String;		public function Cell(screen:Sprite=null,xx:int=0,yy:int=0,valu:String='',wdth:int=80,datatype:String='') {			if (screen!=null) {(myscreen=screen).addChild(this);x=xx;y=yy;}			defaultTextFormat=DEFAULTFORMAT;this.datatype=datatype;			selectable=mouseEnabled=false;			type=TextFieldType.DYNAMIC;			if (valu!='') setcell(valu);		//	autoSize=TextFieldAutoSize.NONE;			width=wdth;height=dheight;			}								public function clone():Cell {			var ret:Cell=new Cell();			ret.value=value;			ret.htmlText=htmlText;			ret.height=height;			ret.string=string;			ret.pre=pre;			ret.post=post;			ret.dps=dps;			ret.gnumformat=gnumformat;			return ret;		}							/*	public function load(ret:*):void {			var dbg:int;			switch(dbg=ret.readUnsignedByte()) {				case 0:numformat=REAL;break;				case 1:numformat=PERCENT;break;				case 2:numformat=CURRENCY;break;				case 3:numformat=TWODP;break;				case 4:numformat=CUSTOM;					dps=ret.readByte();					pre=ret.readUTF();					break;				}		//	trace('rBYTE numformat  '+dbg);			setcell(ret.readUTF());//trace('rUTF string  '+string);		} */					/*	public function save(ret:*):void {			switch(numformat) {				case REAL:ret.writeByte(0);trace('wBYTE numformat  0');break;				case PERCENT:ret.writeByte(1);trace('wBYTE numformat  1');break;				case CURRENCY:ret.writeByte(2);trace('wBYTE numformat  2');break;				case TWODP:ret.writeByte(3);trace('wBYTE numformat  3');break;				case CUSTOM:ret.writeByte(4);trace('wBYTE numformat  4');					ret.writeByte(dps);					ret.writeUTF(pre);				break;				}			ret.writeUTF(string);trace('wUTF string  '+string);		} */						public function todps(valu:Number):String {			var l:int;			var ret:String;			if (dps<0) return valu.toString();			else ret=String(Math.round(valu*Math.pow(10,dps))/Math.pow(10,dps));			if (dps!=0) {				if (ret.lastIndexOf('.')<0) {l=dps;ret+='.';}				else l=dps-(ret.length-ret.lastIndexOf('.'))+1;				for (var i:int=0;i<l;i++) ret+='0';				}			return ret;			}						public function setcell(valu:String):void {			var format:TextFormat=new TextFormat();			var vlu:Number;			if (datatype!='') {				autoSize=TextFieldAutoSize.NONE;				text=string=valu;				if (datatype=='TEXT') {value=0;format.align=TextFormatAlign.LEFT;}				else {value=Number(valu);format.align=TextFormatAlign.RIGHT;}				setTextFormat(format);			} else if (valu.substr(0,1)=='=') {string=valu;text=' ';}			else if (valu.substr(0,1)!=' ' && valu!='' && !isNaN(vlu=Number(valu))) {				autoSize=TextFieldAutoSize.LEFT;				value=Number(string=valu);				if (gnumformat==PERCENT) text=Math.round(vlu*Math.pow(10,dps+2))/Math.pow(10,dps)+'%'; else text=(vlu<0 ? '-' : '')+pre+todps(Math.abs(vlu));				format.align=TextFormatAlign.RIGHT;				setTextFormat(format);			} else {				autoSize=TextFieldAutoSize.LEFT;				string=valu;				value=0;				text=valu;				format.align=TextFormatAlign.LEFT;				setTextFormat(format);				}			}					public function newformat(format:TextFormat):void {			autoSize=TextFieldAutoSize.LEFT;			setTextFormat(defaultTextFormat=format);			}						public function set numformat(nfrmt:String):void {			gnumformat=nfrmt;			if (nfrmt!='')			if (nfrmt==CURRENCY) numberformat(_precision,_currencySymbol);			else if (nfrmt==TWODP) numberformat(_precision,'');			else if (nfrmt==PERCENT) numberformat(2,'');			else if (nfrmt==REAL) numberformat(-1,'');		}						public function set precision(value:int):void {			_precision=value;			numberformat(_precision);		}						public function get precision():int {			return _precision;		}						public function get numformat():String {			return gnumformat;		}				public function numberformat(dps:int=-2,pre:String='.'):void {			if (dps!=-2) this.dps=dps;			if (pre!='.') this.pre=pre;			if (isvalue) setvalue(value,iscurrent);		}						public function get isformula():Boolean {			return string.substr(0,1)=='=';		}						public function get isvalue():Boolean {			var str:String=string;			if (str.substr(0,1)==' ') return false;			return string.substr(0,1)=='=' || (!isNaN(Number(str)) && str!='');		}						public function get currencySymbol():String {			return _currencySymbol;					}						public function set currencySymbol(value:String):void {			_currencySymbol=value;			gnumformat=CURRENCY;			numberformat(_precision,_currencySymbol);		}						public function setvalue(valu:Number,current:int):void {			var format:TextFormat=new TextFormat();			value=valu;			format.align=TextFormatAlign.RIGHT;			defaultTextFormat=format;			if (isNaN(value)) text=String(valu);				else if (gnumformat==PERCENT) text=Math.round(valu*Math.pow(10,dps+2))/Math.pow(10,dps)+'%'; else text=(valu<0 ? '-' : '')+pre+todps(Math.abs(valu));			iscurrent=current;		}						public function onscreen(screen:Sprite):void {			(myscreen=screen).addChild(this);		}						public function destructor():void {			myscreen.removeChild(this);		}						public function get format():TextFormat {			if (defaultTextFormat==null) return null;			else return new TextFormat(defaultTextFormat.font,defaultTextFormat.size,defaultTextFormat.color,defaultTextFormat.bold,defaultTextFormat.italic,defaultTextFormat.underline);		}			}}