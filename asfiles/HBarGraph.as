/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS' OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package asfiles {		import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.filters.BevelFilter;	import flash.filters.DropShadowFilter;	public class HBarGraph extends BarGraph {			public function HBarGraph(screen:Sprite,xx:int,yy:int,select:Packet,ss:*=null,freq:Boolean=false) {		super(screen,xx,yy,select,ss,freq);iam=3;		}				override public function plotbar(screen:Sprite,wdth:Number, hght:Number, soffset:Number, cell:Cell, i:int, xx:int, c:uint, top:Boolean, fval:int,flabel:String):void {		var h:Number;		if (swap) h=(datai==1 || stack) ? h=myheight/dataj : myheight/(dataj*(datai+1)-1);		else h=(dataj==1 || stack) ? h=myheight/datai : myheight/(datai*(dataj+1)-1);		if (bars[i]==null) bars[i]=new HBar(screen);		bars[i].drawbar((srange==0) ? mywidth : (mywidth/srange),h,freq ? null : cell,sxoffset,xx,c,threed,stack,top,fval,flabel);		}						override public function gridbehind():void {		var yy:int;//trace('step='+step+' swdth='+swdth);		gridbe.graphics.clear();		gridbe.graphics.lineStyle(1,0xddddff);		gridbe.graphics.moveTo(0,0);		gridbe.graphics.lineTo(mywidth,0);		gridbe.graphics.moveTo(0,myheight);		gridbe.graphics.lineTo(mywidth,myheight);		for (var i:int=0;i<=sintervals;i++) {			yy=i*mywidth/sintervals;			gridbe.graphics.moveTo(yy,0);			gridbe.graphics.lineTo(yy,myheight);			}		}						override public function drawaxis():void {			drawax.graphics.clear();			drawax.graphics.lineStyle(2,0x666666);			drawax.graphics.moveTo(sxoffset,0);			drawax.graphics.lineTo(sxoffset,myheight);		}						override public function drawscale(screen:Sprite):void {		}						override public function dddaxis(x0:Number,x1:Number,neg:Boolean):void {		}	}}