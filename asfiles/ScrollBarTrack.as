/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS' OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package asfiles {		import flash.display.Sprite;		import flash.events.MouseEvent;		import flash.display.Graphics;		import flash.display.GradientType;		import flash.filters.BevelFilter;		import flash.geom.Matrix;			public class ScrollBarTrack extends ScrollBarStyle {					private var horizontal:Boolean;				public function ScrollBarTrack(screen:Sprite,xx:int,yy:int,heigt:int,horiz:Boolean=false) {			var myht:int=heigt-2*wdth;horizontal=horiz;			var matr:Matrix=new Matrix();			var myfilters:Array=new Array();			var filling:Sprite=new Sprite();						var outline:Sprite=new Sprite();						x=xx;y=yy;						filling.graphics.clear();			matr.createGradientBox(wdth, myht, 0, 0, 0);			filling.graphics.beginGradientFill(GradientType.LINEAR,trough,[1,1],[0x00,0xff],matr);			redraw(filling.graphics,matr,myht);			if (horiz) {				myfilters.push(new BevelFilter(3.0,horiz ? 0 : 90,0x666666,1.0,0xe8e8e8,1.0,1.0,5.0,1.0,1));            	filling.filters=myfilters;			}			redraw(outline.graphics,matr,myht);			addChild(filling);			addChild(outline);						screen.addChild(this);		}				public function redraw(graphics:Graphics,matr:Matrix,myht:int):void {			graphics.lineStyle(1,lindgr[0]);			graphics.lineGradientStyle(GradientType.RADIAL,lindgr,[1,1],[0x00,0xff],matr);			graphics.moveTo(0,0);			graphics.lineTo(wdth-crnr,0);			graphics.curveTo(wdth,0,wdth,crnr);			graphics.lineTo(wdth,myht-crnr);			graphics.curveTo(wdth,myht,wdth-crnr,myht);			graphics.lineTo(0,myht);			graphics.lineTo(0,0);			graphics.endFill();		}	}}