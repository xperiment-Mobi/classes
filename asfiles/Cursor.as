/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS' OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package asfiles {		import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.ui.Mouse;	import flash.utils.Timer;		public class Cursor extends Sprite {				static public function changecursor(mystage:Stage,mde:Sprite=null,setToDefault:Boolean=false,rect:Rectangle=null):void {mystage.dispatchEvent(new MyEvent(CURSOR,mde,setToDefault,rect));}		static public function cursorhint(mystage:Stage,txt:String=''):void {mystage.dispatchEvent(new MyEvent(HINT,txt));}		static public function delayhint(mystage:Stage,txt:String=''):void {mystage.dispatchEvent(new MyEvent(DELAYHINT,txt));}				static public function infront(mystage:Stage,what:* =null,pt:Point=null,dontmove:Boolean=false):void {						mystage.dispatchEvent(new MyEvent(INFRONT,what,pt,dontmove));}				public static var HINT_Y:Number = 0;				static private const CURSOR:String='Cursor.cursor';		static private const HINT:String='Cursor.hint';		static private const DELAYHINT:String='Cursor.delayhint';		static public const INFRONT:String='Cursor.infront';		private const delay:int=500;				private var hint:HintText;		private var thing:DisplayObject=null;		private var mycursor:Sprite=null;		private var timer:Timer = new Timer(delay, 1);		private var yesfunction:Function;		private var nofunction:Function;				protected var _defaultCursor:Sprite=null;		public function Cursor(screen:Sprite) {			hint=new HintText(this);			screen.addChild(this);x=y=0;mouseEnabled=hint.visible=hint.mouseEnabled=false;			stage.addEventListener(CURSOR,echangecursor);			stage.addEventListener(HINT,ecursorhint);			stage.addEventListener(DELAYHINT,edelayhint);			stage.addEventListener(INFRONT,einfront);			timer.addEventListener(TimerEvent.TIMER,showhint);		}						private function einfront(ev:MyEvent):void {			var wht:DisplayObject=ev.parameters[0];			var pt:Point=ev.parameters[1];			var dontmove:Boolean=ev.parameters[2];						if (wht==null) {if (thing!=null) thing.visible=false;}			else {				if (wht!=thing) {					if (thing!=null) removeChild(thing);					addChild(thing=wht);				}				thing.visible=true;				if (pt!=null) {					if (dontmove) {thing.x=pt.x;thing.y=pt.y;}					else {						if (pt.x+thing.width>stage.stageWidth) thing.x=pt.x-thing.width; else thing.x=pt.x;						if (pt.y+thing.height>stage.stageHeight) thing.y=pt.y-thing.height-20; else thing.y=pt.y+4;						}					}				setChildIndex(thing,numChildren-1);			}		}		private function ecursorhint(ev:MyEvent):void {			var txt:String=ev.parameters[0];						if (txt==null || txt=='') {				hint.visible=false;				stage.removeEventListener(MouseEvent.MOUSE_MOVE,mousemove);			} else {				hint.text=txt;				hint.x=mouseX-hint.width*(HINT_Y==0 ? 1 : 0.5);hint.y=mouseY-HINT_Y;				if (hint.x<0) hint.x=0; else if (hint.x+hint.width>stage.stageWidth) hint.x=stage.stageWidth-hint.width;								hint.visible=true;				stage.addEventListener(MouseEvent.MOUSE_MOVE,mousemove);			}		}				private function edelayhint(ev:MyEvent):void {			var txt:String=ev.parameters[0];						if (txt==null || txt=='') {				hint.visible=false;				timer.stop();			} else {				hint.text=txt;				timer.start();			}		}		private function showhint(ev:TimerEvent):void {			hint.x=mouseX-hint.width/2;			if (hint.x<0) hint.x=0; else if (hint.x+hint.width>stage.stageWidth) hint.x=stage.stageWidth-hint.width;			hint.y=mouseY+16;			if (hint.y+hint.height>stage.stageHeight) hint.y=stage.stageHeight-hint.height-16;			hint.visible=true;		}						private function mousemove(ev:MouseEvent):void {			hint.x=mouseX-hint.width*(HINT_Y==0 ? 1 : 0.5);hint.y=mouseY-HINT_Y;		}						private function echangecursor(ev:MyEvent):void {			var mde:Sprite=ev.parameters[0];			var setToDefault:Boolean=ev.parameters[1];			var rect:Rectangle=ev.parameters[2];						if (setToDefault) _defaultCursor=mde;			if (mde==null) mde=_defaultCursor;			if (mde==null) {				stopDrag();				Mouse.show();				if (mycursor!=null) mycursor.visible=false;				} else {				if (mde!=mycursor) {					if (mycursor!=null && this.contains(mycursor)) removeChild(mycursor);					addChild(mde);					mycursor=mde;					}				mycursor.startDrag(true,rect);				Mouse.hide();				mycursor.visible=true;				mycursor.x=mouseX;				mycursor.y=mouseY;				}		}						public function destructor():void {			stage.removeEventListener(CURSOR,echangecursor);			stage.removeEventListener(HINT,ecursorhint);			stage.removeEventListener(DELAYHINT,edelayhint);			stage.removeEventListener(INFRONT,einfront);			timer.removeEventListener(TimerEvent.TIMER,showhint);		}	}		}