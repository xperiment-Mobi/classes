/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS' OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package asfiles {	import flash.display.GradientType;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.filters.DropShadowFilter;	import flash.filters.GlowFilter;	import flash.geom.Matrix;	import com.danielfreeman.madcomponents.Colour;		public class SimplePalette extends Sprite {		public static const CLEARSELECTION:String='Graphpalette.clearselection';		public static const HIGHLITE:String='Thing.highlite';		public var mcolour:uint=0x999999;		public var lcolour:uint=0xffffff;		public var fillcolour:uint=0xffffff;		public const highlitecolour:uint=0xccccff;		protected var margin:Number=2;		public var minsize:int=80;		public const frame:int=28;		protected const focuscolour:uint=0x9999ff;		protected const shadowcolour:int=0x000000;		public var edge:Sprite=new Sprite();		public var wdth:int=256;		public var hght:int=128;		private var oldwdth:int,oldhght:int;		public var extra:int=0;		protected var xxoffset:int=0;		protected var yyoffset:int=0;		protected var screen:Sprite;		public var highlited:Boolean=false;				protected var nullfilters:Array=null;		protected var selectFilters:Array;				protected var startX:Number;		protected var startY:Number;		protected var _alpha:Number=1.0;		public function SimplePalette(screen:Sprite,xx:int,yy:int) {			(this.screen=screen).addChild(this);x=xx;y=yy;			hitArea=new Sprite();addChild(hitArea);hitArea.mouseEnabled=false;			addChild(edge);edge.hitArea=new Sprite();addChild(edge.hitArea);			redraw(lcolour);edge.hitArea.mouseEnabled=false;		//	cursor=new EdgeCursor(this,edge);			setUpListeners();						selectFilters=new Array();			selectFilters.push(new GlowFilter(focuscolour,1.0,6.0,6.0));		//	selectFilters.push(new DropShadowFilter(4.0,45,shadowcolour,0.5));			}						public function reinstate():void		{			screen.addChild(this);			setUpListeners();		}						protected function setUpListeners():void		{			if (stage) {				stage.addEventListener(HIGHLITE,highlite);				stage.addEventListener(CLEARSELECTION,deselect);			}		}		private function highlite(ev:MyEvent):void {			highlited=ev.parameters[0]==this;			redraw(lcolour);		}		public function customcolours(mcolour:uint,lcolour:uint,fillcolour:uint=0xffffff):void {			this.mcolour=mcolour;			this.lcolour=lcolour;			this.fillcolour=fillcolour;		}		public function redraw(colour:uint=0xffffff):void {			var wdth:int;			var matr:Matrix=new Matrix();			if (this.wdth<minsize) this.wdth=minsize;			wdth=this.wdth+extra;			if (hght<minsize) hght=minsize;			if (this.wdth!=oldwdth||hght!=oldhght) resize(this.wdth,hght);			oldwdth=this.wdth;oldhght=hght;			graphics.clear();		//	graphics.beginFill(fillcolour,fillcolour==0 ? 0 : 1);			matr.createGradientBox(wdth, hght, Math.PI/4, 0, 0);			graphics.beginGradientFill(GradientType.LINEAR,[fillcolour,Colour.lighten(fillcolour,64)],fillcolour==uint.MAX_VALUE ? [0,0] : [_alpha,_alpha],[0,0xff],matr);			if (highlited) graphics.lineStyle(3,highlitecolour);			graphics.drawRect(0,0,wdth,hght);			hitArea.graphics.clear();			hitArea.graphics.beginFill(0,0);		//	hitArea.graphics.drawRect(margin,margin,wdth-2*margin,hght-2*margin);			hitArea.graphics.drawRect(0,0,wdth,hght);			edge.graphics.clear();			edge.graphics.lineStyle(0,colour,fillcolour==uint.MAX_VALUE ? 0 : 1);			edge.graphics.drawRect(0,0,wdth,hght);			edge.hitArea.graphics.clear();			edge.hitArea.graphics.beginFill(0,0);			edge.hitArea.graphics.drawRect(-margin,-margin,wdth+2*margin,hght+2*margin);			edge.hitArea.graphics.drawRect(margin,margin,wdth-2*margin,hght-2*margin);		}			public function resize(wdth:int,hght:int):void {		}						public function select():void {			filters=selectFilters;			redraw(focuscolour);		}						public function deselect(ev:MyEvent=null):void {			var who:SimplePalette=ev ? ev.parameters[0] as SimplePalette : null;			if (who!=this) {				filters=nullfilters;				redraw(lcolour);			}		}						public function destructor():void {			stage.removeEventListener(HIGHLITE,highlite);			stage.removeEventListener(CLEARSELECTION,deselect);			if (screen.contains(this)) screen.removeChild(this);		}	}	}