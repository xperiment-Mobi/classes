/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS' OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package asfiles {		import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import flash.geom.Matrix;	import flash.display.GradientType;	import flash.filters.BevelFilter;	import flash.filters.DropShadowFilter;	import flash.text.TextFormatAlign;	import flash.events.Event;	public class ClickButton extends MyButton {		public const normal:Array=[0xfefefe,0xebebeb,0xcccccc,0x999999];		public const active:Array=[0xd7efff,0x99ccff,0x6699ff,0x0033ff];		public var wdth:int=64;				public var format:TextFormat;	//	private var thetext:BlueText;		public var thetext:*;		public var txt:String;		public var blue:Boolean;		public function ClickButton(screen:Sprite,xx:int,yy:int,txt:String,blue:Boolean=false,hint:String=null,format:TextFormat=null,id:String=null,edit:Boolean=false) {			if (format==null) format=new TextFormat('Arial',14,0x333366);			this.txt=txt;this.format=format;this.blue=blue;			super(screen,xx,yy,hint,0xffffff,id,0xeeeeff);			thetext.addEventListener(Event.CHANGE,changed);		}						private function changed(ev:Event):void {			appendage(blue ? active : normal,thetext.width+20,thetext.height+2);			thetext.x=(wdth-thetext.width)/2;		}				override public function redraw(colour:uint = 0):void {			thetext=new PrintAt(this,0,0,txt,null,format);		//	thetext=new BlueText(this,0,0,txt,-1,format);			appendage(blue ? active : normal,thetext.width+20,thetext.height+2);			thetext.x=(wdth-thetext.width)/2;		}					//	public function set text(txt:String):void {	//		thetext.text=txt;	//		appendage(blue ? active : normal,thetext.width+20,thetext.height+2);	//		thetext.x=(wdth-thetext.width)/2;	//	}					//	public function get text():String {	//		return thetext.text;	//	}				public function appendage(st:Array,twdth:int,hght:int):void {			var matr:Matrix=new Matrix();			var myfilters:Array=new Array();			matr.createGradientBox(wdth,hght, Math.PI/2, 0, 0);			graphics.clear();			graphics.lineStyle(1,st[3]);			graphics.beginGradientFill(GradientType.LINEAR,st,[100,100,100,100],[0x00,0x99,0xee,0xff],matr);			graphics.drawRoundRect(twdth<wdth ? 0 : (wdth-twdth)/2,0,Math.max(wdth,twdth),hght,hght);			myfilters.push(new BevelFilter(4,45,0xffffff,0.6,0x999999,0.6));            myfilters.push(new DropShadowFilter(3.0,45,0xcccccc,0.5));			filters=myfilters;		}	}}