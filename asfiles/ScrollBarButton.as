/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS' OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package asfiles {		import flash.display.GradientType;	import flash.display.Shape;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.MouseEvent;	import flash.geom.Matrix;		public class ScrollBarButton extends ScrollBarStyle {				private var up:Boolean;		protected var mystage:Stage;				public var arrow:Shape=new Shape();				public function ScrollBarButton(screen:Sprite,xx:int,yy:int,up:Boolean=false) {			x=xx;y=yy;this.up=up;			if (up) scaleY=-1;			redraw(normal,linegr);						screen.addChild(this);addChild(arrow);arrow.x=arrow.y=0;mystage=stage;			addEventListener(MouseEvent.MOUSE_DOWN,mdown);			addEventListener(MouseEvent.MOUSE_OVER,mover);			addEventListener(MouseEvent.MOUSE_OUT,mout);		}				public function mover(ev:MouseEvent):void {			if (ev.buttonDown) mdown(ev);			else redraw(rollov,linacr);		}				public function mout(ev:MouseEvent):void {			redraw(normal,linegr);		}				public function mdown(ev:MouseEvent):void {			redraw(active,lindgr);			mystage.addEventListener(MouseEvent.MOUSE_UP,mup);		}				public function mup(ev:MouseEvent):void {			mystage.removeEventListener(MouseEvent.MOUSE_UP,mup);			redraw(normal,linegr);		}				public function redraw(fillstyle:Array,linestyle:Array):void {			var matr:Matrix=new Matrix();			graphics.clear();			matr.createGradientBox(wdth, wdth, up ? -Math.PI/2 : Math.PI/2, 0, 0);			graphics.beginGradientFill(GradientType.LINEAR,fillstyle,[100,100],[0x00,0xff],matr);			graphics.lineStyle(1,lindgr[0]);			graphics.lineGradientStyle(GradientType.RADIAL,linestyle,[100,100],[0x00,0xff],matr);			graphics.moveTo(0,0);			graphics.lineTo(wdth,0);			graphics.lineTo(wdth,wdth+crnr);			graphics.curveTo(wdth,wdth,wdth-crnr,wdth);			graphics.lineTo(0,wdth);			graphics.endFill();			drawarrow();		}				private function drawarrow():void {			arrow.graphics.clear();			arrow.graphics.lineStyle(0,0,0);			arrow.graphics.beginFill(offcolour);			arrow.graphics.moveTo(wdth/2,wdth/2-arsz);			arrow.graphics.lineTo(wdth/2+arsz,wdth/2+arsz);			arrow.graphics.lineTo(wdth/2-arsz,wdth/2+arsz);			arrow.graphics.endFill();		}	}}