/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS' OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package asfiles {		import flash.display.Sprite;	import flash.display.Shape;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldType;	import flash.text.TextFieldAutoSize;	import flash.ui.Mouse;	import flash.events.MouseEvent;		public class GraphShape extends Sprite {		public var altcursor:AltCursor=new AltCursor();		public var cell:Cell;		public var colour:uint;		private var screen:Sprite;		public var flabel:String='';			public function GraphShape(screen:Sprite) {			(this.screen=screen).addChild(this);			addEventListener(MouseEvent.MOUSE_OVER,mouseover);			addEventListener(MouseEvent.MOUSE_OUT,mouseout);		} 				public function mouseover(ev:MouseEvent):void {			Cursor.changecursor(stage,altcursor);			if (flabel!='') Cursor.cursorhint(stage,flabel);			else Cursor.cursorhint(stage,cell!=null ? cell.text : '0');			if (cell!=null) {cell.backgroundColor=colour;cell.background=true;}		}						public function mouseout(ev:MouseEvent):void {			Cursor.changecursor(stage);		//	stage.dispatchEvent(new MyEvent('cursor',null));			Cursor.cursorhint(stage);			if (cell!=null) {cell.backgroundColor=0xffffff;cell.background=false;}		}						public function destructor():void {			removeEventListener(MouseEvent.MOUSE_OVER,mouseover);			removeEventListener(MouseEvent.MOUSE_OUT,mouseout);			screen.removeChild(this);		}			}}