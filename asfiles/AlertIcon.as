/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS' OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package asfiles {		import flash.display.Sprite;	import flash.filters.BevelFilter;	import flash.filters.DropShadowFilter;	import flash.display.GradientType;		public class AlertIcon extends Sprite {				private const linecolour:uint=0xffdd66;		private const fillcolour:uint=0xffec7f;		private const gradcolour:uint=0xffee66;		private const symbolcolour:uint=0xffffff;		private const segangle:int=120;		private const symbolwidth:int=5;		private const symbolheight:int=22;		private const st:int=22;		private const offset:int=10;		private const torad:Number=Math.PI/180;				public function AlertIcon(screen:Sprite,xx:int,yy:int) {			var myfilters:Array=new Array();			var j:int;			screen.addChild(this);x=xx;y=yy;			graphics.clear();			graphics.lineStyle(0,linecolour);			graphics.beginGradientFill(GradientType.LINEAR,[gradcolour,fillcolour],[1,1],[0x00,0xff]);		//	graphics.beginFill(fillcolour);			graphics.moveTo(0,st);			for (j=0;j<3;j++) graphics.curveTo(st*2*Math.sin(torad*(j+.5)*segangle),st*2*Math.cos(torad*(j+.5)*segangle),st*Math.sin(torad*(j+1)*segangle),st*Math.cos(torad*(j+1)*segangle));			graphics.beginFill(symbolcolour);			graphics.moveTo(0,-symbolheight/2-offset);			for (j=0;j<3;j++) graphics.curveTo(symbolwidth*2*Math.sin(torad*(j+.5)*segangle),-symbolheight*Math.cos(torad*(j+.5)*segangle)-offset,symbolwidth*Math.sin(torad*(j+1)*segangle),-symbolheight/2*Math.cos(torad*(j+1)*segangle)-offset);			graphics.drawCircle(0,symbolheight/2,symbolwidth);			myfilters.push(new BevelFilter(0.5,45,0xffffff,1,0x666633,0.9,4,4,1,1,"outer"));           // myfilters.push(new DropShadowFilter(3.0,45,0xcccccc,0.5));			filters=myfilters;			}			}	}