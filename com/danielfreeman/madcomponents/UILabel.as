/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package com.danielfreeman.madcomponents {		import flash.display.Sprite;	import flash.events.FocusEvent;	import flash.events.MouseEvent;	import flash.events.TextEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.text.TextFormat;	/** *  MadComponents label * <pre> * &lt;label *   id = "IDENTIFIER" *   alignH = "left|right|centre|fill" *   alignV = "top|bottom|centre" *   visible = "true|false" *   width = "NUMBER" *   height = "NUMBER" * /&gt; * </pre> */	public class UILabel extends TextField {				public static var FORMAT:TextFormat = new TextFormat("_sans",16,0x333333);				public function UILabel(screen:Sprite,xx:int,yy:int,txt:String = "",format:TextFormat=null) {			screen.addChild(this);			x=xx;y=yy;			mouseEnabled=multiline=selectable=false;			type=TextFieldType.DYNAMIC;			autoSize=TextFieldAutoSize.LEFT;			if (format==null) format=FORMAT;			defaultTextFormat=format;height=30;			if (txt=="") {				text=" ";			}			else {				xmlText=txt;			}		//	xml = XML(txt);		}	/** *  Set width of label */		public function set fixwidth(value:Number):void {			multiline=wordWrap = true;			width = value;		}						public function set xmlText(value:String):void {			var xmlValue:XML = XML('<a>' + value + '</a>');			if (xmlValue.hasComplexContent()) {				htmlText = value;				if (text=="") {					text=" ";				}			}			else {				text = value;			}		}				/*		public function set xmlText(value:XML):void {			if (value.hasComplexContent()) {				var xmlString:String = value.toXMLString();				htmlText = xmlString.substring(xmlString.indexOf(">")+1,xmlString.lastIndexOf("<"));				if (text=="") {					text=" ";				}			}			else {				text = value;			}		}*/		/** *  Set height of multi-line label */		public function set fixheight(value:Number):void {			autoSize=TextFieldAutoSize.NONE;			multiline=wordWrap = true;			height = value;		}		/** *  Set html text */		override public function set htmlText(value:String):void {			super.htmlText = value;			defaultTextFormat = this.getTextFormat();		}	}}