/** * <p>Original Author: Daniel Freeman</p> * * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> * * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> * * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS' OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> * * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> */package com.danielfreeman.extendedMadness {		import flash.display.Sprite;	import flash.display.Stage;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.events.MouseEvent;	import flash.filters.DropShadowFilter;	import flash.filters.BevelFilter;	import flash.geom.Matrix;	import flash.display.GradientType;	import flash.display.SpreadMethod;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;		import asfiles.ClickButton;	import asfiles.AlertIcon;	import asfiles.PrintAt;/** * Alert Message with up to three buttons */		public class AlertMessage extends Sprite {				protected static const WDTH:int=340;		protected static const HGHT:int=128;		protected static const TOP_MARGIN:int=50;		protected static const SIDE_MARGIN:int=50;		protected static const FILL_COLOUR_0:uint=0xffffff;		protected static const FILL_COLOUR_1:uint=0xfcfcfc;		protected static const LINE_COLOUR:uint=0xdddddd;		protected static const STRIPE:int=6;		protected static const BUTTON_SPACING:int=100;		protected static const SHADOW_COLOUR:uint=0x000000;				public var alerticon:AlertIcon;		public var txt:PrintAt;		protected var yes:ClickButton=null;		protected var no:ClickButton=null;		protected var alt:ClickButton=null;		protected var screen:Sprite;				protected var yesfunction:Function;		protected var nofunction:Function;		protected var altfunction:Function;				public function AlertMessage(screen:Sprite,msg:String,yeslabel:String,yesfunction:Function=null,nolabel:String=null,nofunction:Function=null,altlabel:String=null,altfunction:Function=null,format:TextFormat=null) {		var matr:Matrix=new Matrix();		var myfilters:Array=new Array();		screen.addChild(this);this.screen=screen;this.yesfunction=yesfunction;this.nofunction=nofunction;this.altfunction=altfunction;				if (stage) x=(stage.stageWidth-WDTH)/2;				y=TOP_MARGIN;		graphics.clear();		graphics.lineStyle(0,LINE_COLOUR);		matr.createGradientBox(WDTH,STRIPE, Math.PI/2, 0, 0);		graphics.beginGradientFill(GradientType.LINEAR,[FILL_COLOUR_0,FILL_COLOUR_0,FILL_COLOUR_1],[0.99,0.99,0.99],[0x00,0x60,0x61],matr,SpreadMethod.REPEAT);		graphics.drawRect(0,0,WDTH,HGHT);				alerticon=new AlertIcon(this,SIDE_MARGIN,HGHT/3);		txt=new PrintAt(this,2*SIDE_MARGIN,HGHT/8,msg,null,(format!=null) ? format : new TextFormat('Arial',15,0x666666));		txt.multiline=txt.wordWrap=true;		txt.width=WDTH-txt.x-5;		yes=new ClickButton(this,WDTH-BUTTON_SPACING,2*HGHT/3,yeslabel,true);		yes.addEventListener(MouseEvent.MOUSE_UP,clickyes);		if (nolabel!=null) {			no=new ClickButton(this,WDTH-2*BUTTON_SPACING,2*HGHT/3,nolabel);			no.addEventListener(MouseEvent.MOUSE_UP,clickno);			}		if (altlabel!=null) {			alt=new ClickButton(this,WDTH-3*BUTTON_SPACING,2*HGHT/3,altlabel);			alt.addEventListener(MouseEvent.MOUSE_UP,clickalt);			}					myfilters.push(new BevelFilter(1,45,SHADOW_COLOUR,0.2,SHADOW_COLOUR,0.2,12,12,1,1,"outer"));		myfilters.push(new DropShadowFilter(5.0,45,SHADOW_COLOUR,0.5,8,8));		filters=myfilters;		addEventListener(KeyboardEvent.KEY_UP,kevent);		}						protected function kevent(ev:KeyboardEvent):void {			if (ev.keyCode==Keyboard.ENTER) clickyes();		}		/** * Set message text */			public function set text(value:String):void {			txt.text=value;		}		/** * "Yes" button handler */			protected function clickyes(ev:MouseEvent=null):void {			if (yesfunction!=null) yesfunction();			destructor();		}			/** * "No" button handler */		protected function clickno(ev:MouseEvent):void {			if (nofunction!=null) nofunction();			destructor();		}	/** * "Alt" button handler */		protected function clickalt(ev:MouseEvent):void {			if (altfunction!=null) altfunction();			destructor();		}						public function destructor():void {			removeEventListener(KeyboardEvent.KEY_UP,kevent);			yes.removeEventListener(MouseEvent.MOUSE_UP,clickyes);			if (no!=null) no.removeEventListener(MouseEvent.MOUSE_UP,clickno);			if (alt!=null) alt.removeEventListener(MouseEvent.MOUSE_UP,clickalt);			screen.removeChild(this);		}	}	}