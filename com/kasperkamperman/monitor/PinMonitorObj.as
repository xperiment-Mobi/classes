package com.kasperkamperman.monitor{	import flash.display.*;  	import flash.events.*;	import flash.text.*;		import fl.controls.Button; 	import fl.events.ComponentEvent;		import fl.controls.ProgressBar; 	import fl.controls.ProgressBarDirection; 	import fl.controls.ProgressBarMode; 		import fl.controls.Slider; 	import fl.events.SliderEvent; 		import net.eriksjodin.arduino.events.ArduinoEvent;	import net.eriksjodin.arduino.Arduino;		import net.eriksjodin.arduino.ArduinoWithServo;		public class PinMonitorObj extends MovieClip   	{	private var _txFmt:TextFormat		private var _tx:TextField;		private var _tx2:TextField;		private var _tx3:TextField;		private var _monitor:Sprite;		private var _bgrd_container:Sprite;				private var _bgrd_anIn:Sprite;		private var _bgrd_digOut:Sprite;		private var _bgrd_digIn:Sprite;		private var _bgrd_pwm:Sprite;		private var _bgrd_servo:Sprite;  				private var _ioPin:int;		private var _ioPinName:String;		private var _ioPinText:String;				private var _aButton:Button;		private var _aPb:ProgressBar;		private var _aSlider:Slider;		private var _aSliderServ:Slider;				//private var _arduino:Arduino;
		private var _arduino:ArduinoWithServo;				private var _defaultCfg:Array;  		
  		//public function PinMonitorObj(a:Arduino, p:int, dftCfg:Array = null)  		  		public function PinMonitorObj(a:ArduinoWithServo, p:int, dftCfg:Array = null)		{	_ioPin = p;			_defaultCfg = dftCfg;			// tijdelijke oplossing			_ioPinName = _defaultCfg[p]; 			_arduino = a;						_tx = new TextField();					_tx2 = new TextField();					_tx3 = new TextField();					_txFmt = new TextFormat();						_bgrd_container = new Sprite();									_bgrd_digOut = new Sprite();			with(_bgrd_digOut.graphics) 			{ beginFill(0x00665e) // 4c54d8			  drawRoundRect(0,0,300,30,6);			  endFill();			}						_bgrd_digIn = new Sprite();			with(_bgrd_digIn.graphics) 			{ beginFill(0x081272) // 33cec3			  drawRoundRect(0,0,300,30,6);			  endFill();			}						_bgrd_anIn = new Sprite();			with(_bgrd_anIn.graphics) 			{ beginFill(0x3f046f) //			  drawRoundRect(0,0,300,30,6);			  endFill();			}						_bgrd_pwm = new Sprite();			with(_bgrd_pwm.graphics) 			{ beginFill(0x2e3784) //			  drawRoundRect(0,0,300,30,6);			  endFill();			}						_bgrd_servo = new Sprite();			with(_bgrd_servo.graphics) 			{ beginFill(0x2e37aa) //			  drawRoundRect(0,0,300,30,6);			  endFill();			}						_monitor = new Sprite();						if(_ioPin>13) _ioPinText = "pin " + String(_ioPin-14);			else		  _ioPinText = "pin " + String(_ioPin);						_txFmt.color = 0xffffff;			_txFmt.font = "Arial";			_txFmt.bold = false;			_txFmt.size = 12;									_tx.width= 40;			_tx.height = 20;			_tx.text = _ioPinText;			//_tx.background = true;			//_tx.backgroundColor = 0x000000; //0x5798F1; //0x9dc0f1;			_tx.x = 4;			_tx.y = 5;			_tx.selectable = false;			_tx.setTextFormat(_txFmt);						_tx2.width = 68;			_tx2.height = 20;			_tx2.x = _tx.x + _tx.width + 5;			_tx2.y = _tx.y;			_tx2.selectable = false;			//_tx2.setTextFormat(_txFmt);						_monitor.x = _tx2.x + _tx2.width + 10;			_monitor.y = 4;									_tx3.width = 40;			_tx3.height = 20;			_tx3.text = "000";			//_tx3.background = true;			//_tx3.backgroundColor = 0x000000;			_tx3.x = _monitor.x + 128 + 5;			_tx3.y = _tx.y;			_tx3.selectable = false;			_tx3.setTextFormat(_txFmt);									this.addChild(_bgrd_container);			this.addChild(_tx);			this.addChild(_tx2);			this.addChild(_monitor);			this.addChild(_tx3);						buildGuiElements();						displayGuiElement();		}					public function update(data:Number = 0)		{ // only listen when its digital or analog input		  // var data:Number;		  //trace(_ioPin + " update called !!! : " + data);		  		  		  if(_ioPinName == "digitalIn" || _ioPinName == "analogIn")		  {					  if(_ioPin>13) 			  { //data = _arduino.getAnalogData(_ioPin-14);			    _aPb.setProgress(data, 1024); 										  }			  else     	    			  { //data = _arduino.getDigitalData(_ioPin);			    _aPb.setProgress(data, 1);			  }			  			  			  _tx3.text = String(data);			  _tx3.setTextFormat(_txFmt);		  }		  					}				// not used now, only when dynamicly changing the pin configuration. 						public function updatePinConfig(n:String):void		{ //this.removeChild(_ioPinName);		  removeGuiElement(); 		  _ioPinName = n;		  displayGuiElement();		}						private function displayGuiElement():void		{	/* display the element			   set the pinMode on the Arduino			   */
			
					if(_ioPinName == "digitalOut")		    { _monitor.addChild(_aButton);			  _bgrd_container.addChild(_bgrd_digOut);
			  _tx2.text = "[ " + _ioPinName + " ]";			  _tx2.setTextFormat(_txFmt);			  _tx3.text = "0";			  			}						if(_ioPinName == "digitalIn")		    { _monitor.addChild(_aPb); 			  _bgrd_container.addChild(_bgrd_digIn);			  _tx2.text = "[ " + _ioPinName + " ]";			  _tx2.setTextFormat(_txFmt);			  _tx3.text = "0";				}						if(_ioPinName == "analogIn")			{ _monitor.addChild(_aPb); 							  _bgrd_container.addChild(_bgrd_anIn);			  _tx2.text = "[ " + _ioPinName + " ]";			  _tx2.setTextFormat(_txFmt);			  _tx3.text = "000";			}						if(_ioPinName == "pwmOut")		    { _monitor.addChild(_aSlider); 			  _bgrd_container.addChild(_bgrd_pwm);			  _tx2.text = "[ " + _ioPinName + " ]";			  _tx2.setTextFormat(_txFmt);			  _tx3.text = "000";			}						if(_ioPinName == "servo")		    { _monitor.addChild(_aSliderServ); 			  _bgrd_container.addChild(_bgrd_servo);			  _tx2.text = "[ " + _ioPinName + " ]";			  _tx2.setTextFormat(_txFmt);			  _tx3.text = "000";			}						_tx3.setTextFormat(_txFmt);		}				// only used when dynamicly re-configuring the pin configuration				private function removeGuiElement():void		{	//trace(_ioPinName);			if(_ioPinName == "digitalOut")		    { _monitor.removeChild(_aButton); 			  _bgrd_container.removeChild(_bgrd_digOut);			}						if(_ioPinName == "digitalIn") 		    { _monitor.removeChild(_aPb);			  _bgrd_container.removeChild(_bgrd_digIn);			}						if(_ioPinName == "analogIn")			{ _monitor.removeChild(_aPb);			  _bgrd_container.removeChild(_bgrd_anIn);			}						if(_ioPinName == "pwmOut")		    { _monitor.removeChild(_aSlider); 				  _bgrd_container.removeChild(_bgrd_pwm);			}						if(_ioPinName == "servo")		    { _monitor.removeChild(_aSliderServ); 				  _bgrd_container.removeChild(_bgrd_servo);			}		}				private function buildGuiElements():void		{	// digitalIn			// analogIn			_aPb = new ProgressBar(); 			_aPb.move(0,4); 			_aPb.direction = ProgressBarDirection.RIGHT; 			_aPb.mode = ProgressBarMode.MANUAL; 			_aPb.minimum = 0; 			_aPb.maximum = 1024; 			_aPb.height = 15;			_aPb.width = 128;					// digitalOut			_aButton = new Button(); 			_aButton.label = "LOW";			_aButton.width = 128;			_aButton.toggle = true;  			//_aButton.move(60, 4);			_aButton.addEventListener(MouseEvent.CLICK, buttonClickHandler);						// pwmOut			_aSlider = new Slider(); 			_aSlider.move(0,8);  			_aSlider.width = 128; 			//aSlider.snapInterval = 10; 			//aSlider.tickInterval = 10;			_aSlider.liveDragging = true;			_aSlider.maximum = 255; 			_aSlider.value = 0; 						_aSlider.addEventListener(SliderEvent.CHANGE, slideChangeHandler);						// servo			_aSliderServ = new Slider(); 			_aSliderServ.move(0,8);  			_aSliderServ.width = 128; 						_aSliderServ.liveDragging = true;			_aSliderServ.maximum = 179; 			_aSliderServ.value = 0; 						_aSliderServ.addEventListener(SliderEvent.CHANGE, slideChangeHandler);		}						private function buttonClickHandler(eventObj:MouseEvent):void 		{	//trace(_ioPin + "button clicked" );						if(_aButton.selected) 			{ _aButton.emphasized = true;			  _aButton.label = "HIGH";			  _arduino.writeDigitalPin(_ioPin, Arduino.HIGH);
			  //_arduino.writeDigitalPin(_ioPin, ArduinoWithServo.HIGH);
			  			  _tx3.text = "1";			}			else			{ _aButton.emphasized = false;			  _aButton.label = "LOW";			  _arduino.writeDigitalPin(_ioPin, Arduino.LOW);
			  //_arduino.writeDigitalPin(_ioPin, ArduinoWithServo.LOW);			  _tx3.text = "0";			}			_tx3.setTextFormat(_txFmt);				}						private function slideChangeHandler(event:SliderEvent):void 		{   _arduino.writeAnalogPin(_ioPin, event.value);		    _tx3.text = String(event.value);			_tx3.setTextFormat(_txFmt);						        	//trace(_ioPin + " - " + event.value); 		}				  	}	}