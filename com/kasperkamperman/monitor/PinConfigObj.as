package  com.kasperkamperman.monitor{	import flash.display.*;  	import flash.events.*;	import fl.controls.ComboBox; 	import fl.data.DataProvider; 	import flash.text.*;
	
	import net.eriksjodin.arduino.events.ArduinoEvent;	import net.eriksjodin.arduino.Arduino;
	import net.eriksjodin.arduino.ArduinoWithServo;
	
	import com.kasperkamperman.monitor.PinMonitorObj;		public class PinConfigObj extends MovieClip   	{	private var _dp:DataProvider;   		private var _cb:ComboBox;		private var _txFmt:TextFormat		private var _tx:TextField;		private var _bgrd:Sprite;  				private var _ioPin:int;		private var _ioPinName:String;		private var _ioPinText:String;
		
		private var _monitorObject:PinMonitorObj;
		private var _a:ArduinoWithServo;  		  		  		/* Arduino pin configuration options ----------------------------------		   Which settings you can make for a certain pin. 		*/				// digitalInPins : 2,3,4,5,6,7,8,9,10,11,12,13		private var _arduino_digitalInPins:Array = new Array(			false, false,			true, true, true, true, true, true, true, true, true, true, true, true,			false, false, false, false, false, false			);						// digitalOutPins : 2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19		private var _arduino_digitalOutPins:Array = new Array(			false, false,			true, true, true, true, true, true, true, true, true, true, true, true,			false, false, false, false, false, false			//true, true, true, true, true, true			);					// pwmPins : 3,5,6,9,10,11		private var _arduino_pwmPins:Array = new Array(			false, false,			false, true, false, true, true, false, false, true, true, true, false, false,			false, false, false, false, false, false			);					// analogInPins : 0,1,2,3,4,5 > 14, 15, 16, 17, 18, 19		private var _arduino_analogInPins:Array = new Array(			false, false,			false, false, false, false, false, false, false, false, false, false, false, false,			true, true, true, true, true, true			);	
			
		// servoPins : 9,10
		private var _arduino_servoPins:Array = new Array(			false, false,			false, false, false, false, false, false, false, true, true, false, false, false,			false, false, false, false, false, false			);	  	  		  		public function PinConfigObj(a:ArduinoWithServo, p:int, defaultCfgArray:Array = null, m:PinMonitorObj = null)		{	_a = a;
			_ioPin = p;
			_monitorObject = m;					if(defaultCfgArray) _ioPinName = defaultCfgArray[p]; 					_dp  = new DataProvider(); 			_cb = new ComboBox(); 			_tx = new TextField();						_txFmt = new TextFormat();			_bgrd = new Sprite();						if(_ioPin>13) _ioPinText = "an pin : " + String(_ioPin-14);			else		  _ioPinText = "pin : " + String(_ioPin);						var gr:Graphics = _bgrd.graphics;						gr.beginFill(0x777777,.5)			gr.drawRoundRect(0,0,158,30,6);			gr.endFill();						_txFmt.color = 0xeeeeee;			_txFmt.font = "Arial";			_txFmt.bold = false;			_txFmt.size = 12;			//_txFmt.align = "center";									_tx.width= 60;			_tx.text = _ioPinText;			_tx.x = 4;			_tx.y = 6;			_tx.selectable = false;			_tx.setTextFormat(_txFmt);						_cb.dropdownWidth = 80; 			_cb.width = 80;  			_cb.move(_tx.width+10, 4); 			_cb.dataProvider = _dp; 			//_cb.name = String(_ioPin);			_cb.addEventListener(Event.CHANGE, comboBoxChangeHandler); 						if(_arduino_digitalInPins[_ioPin])  _dp.addItem({label:"digitalIn"});			if(_arduino_analogInPins[_ioPin])   _dp.addItem({label:"analogIn"});			if(_arduino_digitalOutPins[_ioPin]) _dp.addItem({label:"digitalOut"});			if(_arduino_pwmPins[_ioPin]) 	    _dp.addItem({label:"pwmOut"});
			if(_arduino_servoPins[_ioPin]) 	    _dp.addItem({label:"servo"});									this.addChild(_bgrd);			this.addChild(_tx);			this.addChild(_cb); 						if(defaultCfgArray) 			{ // select the selected pin configuration			  _cb.selectedIndex = this.findItemIndex(_cb, _ioPinName);						}			else			{ // there is no ioPinName set yet			  // get the first index label. 			  _ioPinName = _cb.getItemAt(0).label.toString();			}					}					private function comboBoxChangeHandler(event:Event):void		{ 			        var pinConfigStr:String = event.target.selectedItem.label; 			//trace("ioPin"+_ioPin);			
			switch(pinConfigStr)			{ case "digitalIn":				_a.setPinMode(_ioPin, Arduino.INPUT);
				_monitorObject.updatePinConfig("digitalIn");			  break;			  case "analogIn":			    _a.setPinMode(_ioPin, 2); // http://www.firmata.org/wiki/Protocol;
			    _monitorObject.updatePinConfig("analogIn");			  break;			  case "digitalOut":				_a.setPinMode(_ioPin, Arduino.OUTPUT);
				_monitorObject.updatePinConfig("digitalOut");			  break;			  case "pwmOut":
			  	trace("pwm firm");			    _a.setPinMode(_ioPin, Arduino.PWM);
			    _monitorObject.updatePinConfig("pwmOut");			  break;
			  case "servo":
			  	trace("servo firm");			    _a.setPinMode(_ioPin, ArduinoWithServo.SERVO);
			   _monitorObject.updatePinConfig("servo");			  break;							}				}	  				/* by http://www.mechanicmatt.com 		   from : http://snipplr.com/view/8473/set-combo-box-selected-item/		*/		private function findItemIndex(element:ComboBox, dataString:String):int 		{			var index:int = 0;						for (var i = 0; i < element.length; i++) 			{	if (element.getItemAt(i).label.toString() == dataString) 				
			    {   index = i;					break;				}							}					return index;		}		}	}